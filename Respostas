Questão 1:
//Para resolver esta questão, eu usei a IDE online https://play.kotlinlang.org/

//Variáveis globais
var soma = 0
val indice = 13
var k = 0
 
//main
fun main() {
  	soma()
    println(soma)   
}


fun soma(): Int {
    while(k < indice){
        k = k + 1
        soma = soma + k
    }
    return soma
}


Questão 2:
//Para resolver esta questão, eu usei a IDE online https://play.kotlinlang.org/

//Variáveis globais
var t0 = 0
var t1 = 1
var soma = 0

fun main() {
   
   //apesar de utilizar um número fixo para fazer as simulações, alterando o valor dele o código funciona normalmente.
    var entrada = 10
    
    while(soma <= entrada){
        var temp = entrada
       if(temp == 0 || temp == 1 || temp == soma){
           println("O número pertence à sequência fibonacci")
           break
       } else{
			fibo()
       }
    }
    
    if(soma > entrada){
        println("O número não pertence à sequência fibonacci")
    }
}

fun fibo(): Int{   
    soma = t0 + t1
    t0 = t1
    t1 = soma
    
    return soma    
}


Questão 3: 

a) 9
b) 128
c) 49
d) 100
e) 13
f) 200


Questão 4: Quando eles se cruzarem na rodovia, qual estará mais próximo a cidade de Ribeirão Preto?
Independente das informações como velocidade, pedágio, distância, analisando semanticamente a questão, após ambos, caminhão e carro, se cruzarem, o caminhão estará mais próximo da cidade de Ribeirão Preto.
Antes de se cruzar: o carro está mais perto da cidade de Ribeirão Preto.
No momento exato que ambos estão se cruzando: Ambos estão a mesma distância da cidade de Ribeirão Preto.
Após se cruzarem: O caminhão estará mais próximo da cidade de Ribeirão Preto e o carro mais próximo da cidade de Franca.


Questão 5:
//Para resolver esta questão, eu usei a IDE online https://play.kotlinlang.org/

fun main() {
    
    val entrada = "Teste"
    println(inverteString(entrada))
}


fun inverteString(entrada: String): String{
   
    var inverso = ""
    
    for (i in entrada.length - 1 downTo 0){
        inverso = inverso + entrada[i]
    }
    
    return inverso    
}
